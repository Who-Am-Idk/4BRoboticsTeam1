#pragma region VEXcode Generated Robot Configuration
// Make sure all required headers are included.
#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
#include <math.h>
#include <string.h>


#include "vex.h"

using namespace vex;

// Brain should be defined by default
brain Brain;


// START V5 MACROS
#define waitUntil(condition)                                                   \
  do {                                                                         \
    wait(5, msec);                                                             \
  } while (!(condition))

#define repeat(iterations)                                                     \
  for (int iterator = 0; iterator < iterations; iterator++)
// END V5 MACROS


// Robot configuration code.
motor Shifter = motor(PORT1, ratio18_1, false);

controller Controller1 = controller(primary);
motor SteerMotor = motor(PORT4, ratio18_1, false);

motor DriveMotorA = motor(PORT2, ratio18_1, false);
motor DriveMotorB = motor(PORT3, ratio18_1, true);
motor_group Drive = motor_group(DriveMotorA, DriveMotorB);

motor Lift = motor(PORT5, ratio18_1, false);


// define variable for remote controller enable/disable
bool RemoteControlCodeEnabled = true;




#pragma endregion VEXcode Generated Robot Configuration
/*----------------------------------------------------------------------------*/
/*                                                                            */
/*    Module:       ManualDrive.cpp                                           */
/*    Author:       {Matt.S}                                                  */
/*    Created:      Oct 24                                                    */
/*    Description:  V5 project                                                */
/*                                                                            */
/*----------------------------------------------------------------------------*/

#include "vex.h"
  
using namespace vex;

  int gear[] = {1}; //Robot must be started in first gear... Need to come up with file manipulation/sensing.

 void onevent_Controller1Axis1Changed_0(){
  //When right stick is moved (Left & Right Steering)
  SteerMotor.setVelocity(600,rpm);
  //Don't know if multiplying it by -2.5 does anything, but it works, so not changing it.
  SteerMotor.spinToPosition(-3.25*Controller1.Axis1.position(), degrees, false);
 }
 void updateDisplay(int gear, bool plow){
  Controller1.Screen.setCursor(3,1);
  Controller1.Screen.clearLine(3);
  Controller1.Screen.print("Gear %d", gear);
  Controller1.Screen.print(plow ? "Plow Down" : "Plow Up");
}
 void whenStarted1(){
  bool plow;
  Controller1.Screen.print("Gear %d", gear[0]);
  Shifter.setStopping(hold);
  while (true){
    //Axis 3 is the accelerator basically.
    //Using Left stick (Up & Down) for how much the stick is pushed.
    Drive.setVelocity(-Controller1.Axis3.position(), percent);
    //ACTUALLY spinning the motor.
    Drive.spin(forward);
    //Up shift (R1)
    //Check if the bot is not gonna over shift and grind.
    if(Controller1.ButtonR1.pressing() && gear[0] != 4){
      gear[0] += 1;
      Shifter.spinFor(reverse, 90.0, degrees, false);
      Controller1.rumble("..");
      updateDisplay(gear[0], plow);
    }
    //Down shift (R2)
    //Check if the bot is not gonna over shift and grind.
    if(Controller1.ButtonR2.pressing() && gear[0] != 1){
      gear
      Shifter.spinFor(forward, 60.0, degrees, false);
      Controller1.rumble("--");
      updateDisplay(gear[0], plow);
    }
    if(Controller1.ButtonL1.pressing()){
      Lift.spinFor(forward, 120, degrees, false);
      plow = false;
      updateDisplay(gear[0], true);
    }
    if(Controller1.ButtonL2.pressing()){
      Lift.spinFor(reverse,120,degrees,false);
      plow = true;
      updateDisplay(gear[0], true);
    }
    //Print the current gear onto the controller screen. 
  }
}


int main() {
  int stupid = 0;
  Controller1.Screen.setCursor(3,1);
  Controller1.Screen.clearLine(3);
  

  while(!Controller1.ButtonA.pressing()){
  
  if(Controller1.ButtonUp.pressing()){
    stupid+=1;
    Controller1.Screen.clearLine(3);
    Controller1.Screen.print("What gear? %d", stupid);
  } else if (Controller1.ButtonDown.pressing()){
    stupid-=1;
    Controller1.Screen.clearLine(3);
    Controller1.Screen.print("What gear? %d", stupid);
  }
  gear[0] = stupid;
  wait(.5, seconds);
  } 
    Controller1.Axis1.changed(onevent_Controller1Axis1Changed_0);
    whenStarted1();

}

