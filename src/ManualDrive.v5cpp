#pragma region VEXcode Generated Robot Configuration
// Make sure all required headers are included.
#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
#include <math.h>
#include <string.h>


#include "vex.h"

using namespace vex;

// Brain should be defined by default
brain Brain;


// START V5 MACROS
#define waitUntil(condition)                                                   \
  do {                                                                         \
    wait(5, msec);                                                             \
  } while (!(condition))

#define repeat(iterations)                                                     \
  for (int iterator = 0; iterator < iterations; iterator++)
// END V5 MACROS


// Robot configuration code.
motor Shifter = motor(PORT1, ratio18_1, false);

controller Controller1 = controller(primary);
motor Drive = motor(PORT2, ratio18_1, false);

motor SteerMotor = motor(PORT4, ratio18_1, false);

motor Drive2 = motor(PORT3, ratio18_1, true);


// define variable for remote controller enable/disable
bool RemoteControlCodeEnabled = true;




#pragma endregion VEXcode Generated Robot Configuration

/*----------------------------------------------------------------------------*/
/*                                                                            */
/*    Module:       ManualDrive.cpp                                           */
/*    Author:       {Matt.S}                                                  */
/*    Created:      {date}                                                    */
/*    Description:  V5 project                                                */
/*                                                                            */
/*----------------------------------------------------------------------------*/

// Include the V5 Library
#include "vex.h"
  
// Allows for easier use of the VEX Library
using namespace vex;

 char gear[] = {'1'};
 //gear[0] = loadfile("ManualDrive.bin", (uint8_t*)gear, sizeof(gear));


void onevent_Controller1Axis1Changed_0(){
  //When right stick
  SteerMotor.setVelocity(600,rpm);
  SteerMotor.spinToPosition(-2.5*Controller1.Axis1.position(), degrees, false);
}

void whenStarted1(){
  Controller1.Screen.print("Gear %c", gear);
  while (true){
    //Using Left stick (Up & Down) for how much the stick is pushed.
    Drive.setVelocity(-Controller1.Axis3.position(), percent);
    Drive2.setVelocity(-Controller1.Axis3.position(), percent);
    //ACTUALLY spinning the motor.
    Drive.spin(forward);
    Drive2.spin(forward);
    //Up shift (R1)
    if(Controller1.ButtonR1.pressing() && gear[0] != '2'){
      Controller1.Screen.clearLine(3);
      Shifter.spinFor(reverse, 60.0, degrees, false);
      gear[0] = '2';
      Controller1.Screen.print("Gear %c", gear[0]);
    }
    //Down shift (R2)
    if(Controller1.ButtonR2.pressing() && gear[0] != '1'){
      Controller1.Screen.clearLine
      Shifter.spinFor(forward, 60.0, degrees, false);
      gear[0] = '1';
      Controller1.Screen.print("Gear %c", gear[0]);
    }
  }
}


int main() {
    Controller1.Axis1.changed(onevent_Controller1Axis1Changed_0);
    whenStarted1();
    //Brain.SDcard.savefile("ManualDrive.bin", (uint8_t *)gear, sizeof(gear));

}

